//NAME: Ozan Saridas
import java.util.ArrayList;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Creating the initial deck, with all 100 cards
        ArrayList<String> deck = new ArrayList<>();
        // Adds all the normal cards
        for (int i = 0; i <= 9; i++) {
            deck.add("b" + i);
            if (i > 0) {
                deck.add("b" + i);
            }
            deck.add("g" + i);
            if (i > 0) {
                deck.add("g" + i);
            }
            deck.add("r" + i);
            if (i > 0) {
                deck.add("r" + i);
            }
            deck.add("y" + i);
            if (i > 0) {
                deck.add("y" + i);
            }
        }
        // Adds all the draw2 / skip cards
        for (int i = 0; i < 2; i++) {
            deck.add("bDraw2");
            deck.add("bSkip");
            deck.add("gDraw2");
            deck.add("gSkip");
            deck.add("rDraw2");
            deck.add("rSkip");
            deck.add("yDraw2");
            deck.add("ySkip");
        }
        // Adds all the wild cards
        for (int j = 1; j <= 4; j++) {
            deck.add("Wild");
            deck.add("WildDrawFour");
        }

        boolean gameRestart = true;
        while (gameRestart) {
        // Creating a new deck, which will be fully shuffled
        ArrayList<String> updDeck = new ArrayList<>();
        // Taking random cards from the unshuffled deck using an RNG system and adding them to the updated deck
        while (deck.size() != 0) {
            int randNum = (int) (Math.random() * (deck.size() - 1 + 1) + 1) - 1;
            updDeck.add(deck.get(randNum));
            // removing the added card from the unshuffled deck. Once all cards have been removed, the while loop will terminate
            deck.remove(randNum);
        }
        // Adds the option to play against the AI or another player
        System.out.println("Would you like to play against AI (type AI) or another player (type PLAYER)?");
        String AIorPlayer = sc.nextLine();
        if (AIorPlayer.equals("PLAYER")) {
            // Getting the names of the players
            System.out.println("Who is playing player 1?");
            String name1 = sc.nextLine();
            System.out.println("Who is playing player 2?");
            String name2 = sc.nextLine();

            // Initializing the hands of the players
            ArrayList<String> player1 = new ArrayList<>();
            ArrayList<String> player2 = new ArrayList<>();

            // Giving each player 7 cards
            while (updDeck.size() != 86) {
                player1.add(updDeck.get(0));
                updDeck.remove(0);
                player2.add(updDeck.get(0));
                updDeck.remove(0);
            }

            // Creating the discard pile
            ArrayList<String> discardPile = new ArrayList<>();
            for (int a = 0; a < 86; a++) {
                // Looks for a card made up of one colour and one number (e.g. g7, r3) to start the discard pile with
                if ((updDeck.get(a)).length() == 2) {
                    discardPile.add(updDeck.get(a));
                    updDeck.remove(a);
                    // ends the loop so it stops looking
                    break;
                }
            }

            boolean player1turn = true;
            boolean gameFinish = false;

            // the following contains all the code for the ongoing game. When the game ends, the while loop terminates and so dos the game.
            while (!gameFinish) {
                // this code executes when it is player 1's turn
                while (player1turn) {
                    // Refilling the deck in case all the cards in the deck are gone (from drawing etc.)
                    if (updDeck.size() == 0) {
                        while (discardPile.size() > 1) {
                            int randNumb = (int) (Math.random() * (deck.size() - 1 + 1) + 1);
                            updDeck.add(discardPile.get(randNumb));
                            // removing the added card from the unshuffled deck. Once all cards have been removed, the while loop will terminate
                            deck.remove(randNumb);
                        }
                        for (int a = 0; a < 86; a++) {
                            // Looks for a card made up of one colour and one number (e.g. g7, r3) to start the discard pile with
                            if ((updDeck.get(a)).length() == 2) {
                                discardPile.add(updDeck.get(a));
                                updDeck.remove(a);
                                // ends the loop so it stops looking
                                break;
                            }
                        }
                    }
                    // Giving the player necessary information
                    System.out.println(" ");
                    System.out.println("Discard pile: " + discardPile.get(discardPile.size() - 1));
                    System.out.println(name1 + ", it is your turn to play. Your hand is " + player1);

                    // Checking which cards in the player's hand are eligible to play
                    ArrayList<String> eligible = new ArrayList<>();
                    for (int b = 0; b < player1.size(); b++) {
                        if (player1.get(b).charAt(0) == discardPile.get(discardPile.size() - 1).charAt(0) || player1.get(b).charAt(1) == discardPile.get(discardPile.size() - 1).charAt(1) || player1.get(b).startsWith("Wild") || discardPile.get(discardPile.size()-1).endsWith("Skip") && player1.get(b).endsWith("Skip")) {
                            eligible.add(player1.get(b));
                        }
                    }
                    // If there are no eligible cards, the player will draw
                    if (eligible.size() == 0) {
                        System.out.println("You have been forced to draw. Your drawn card is " + updDeck.get(updDeck.size()-1));
                        player1.add(updDeck.get(updDeck.size() - 1));
                        updDeck.remove(updDeck.size() - 1);
                        player1turn = false;
                        break;
                    }
                    // if there are eligible cards, the player is able to choose a card to play
                    else {
                        System.out.println("Which card would you like to play?");
                        String card = sc.nextLine();
                        // this while loop is necessary to make sure that the player can't enter a card that he doesn't have in his hand
                        boolean playable = false;
                        while (!playable) {
                            if (eligible.contains(card)) {
                                discardPile.add(card);
                                player1.remove(card);
                                // this will end the loop
                                playable = true;
                            } else {
                                System.out.println("This card is not playable");
                                System.out.println("Which card would you like to play?");
                                card = sc.nextLine();
                                // restarts the loop by keeping playable at false
                                playable = false;
                            }
                        }
                        // since player1turn is still true, doing break; will just give the player another turn, effectively skipping player2's turn
                        if (card.endsWith("Skip")) {
                            break;
                        }
                        // Forcing 2 cards into player2's hand
                        if (card.endsWith("Draw2")) {
                            player2.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                            player2.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                        }
                        if (card.startsWith("Wild")) {
                            // all wild cards, whether just a normal one or a draw four one, give you the choice to chance the colour
                            System.out.println("What colour would you like to change it to? Enter in this format: colour");
                            discardPile.add(sc.nextLine());
                            // in case it's a WildDrawFour, player2 will draw four cards
                            if (card.endsWith("DrawFour")) {
                                for (int h = 0; h < 4; h++) {
                                    player2.add(updDeck.get(0));
                                    updDeck.remove(0);
                                }
                            }
                        }
                        // this ends the loop, allowing the opposing player to play
                        player1turn = false;
                    }
                }
                // if, by the end of this, player1 has no cards in their hand, they win the game
                if (player1.size() == 0) {
                    System.out.println("You won the game with " + player2.size() + " points!");
                    // setting gameFinish to true ends the entire loop that encompasses most of this program
                    gameFinish = true;
                    break;
                }
                // from here to line 266, the code is the exact same as the player1 program, except all the player1's are changed to player2 and vice versa (because this segment is for player 2)
                while (!player1turn) {
                    if (updDeck.size() == 0) {
                        while (discardPile.size() > 1) {
                            int randNumb = (int) (Math.random() * (deck.size() - 1 + 1) + 1);
                            updDeck.add(discardPile.get(randNumb));
                            // removing the added card from the unshuffled deck. Once all cards have been removed, the while loop will terminate
                            deck.remove(randNumb);
                        }
                        for (int a = 0; a < 86; a++) {
                            // Looks for a card made up of one colour and one number (e.g. g7, r3) to start the discard pile with
                            if ((updDeck.get(a)).length() == 2) {
                                discardPile.add(updDeck.get(a));
                                updDeck.remove(a);
                                // ends the loop so it stops looking
                                break;
                            }
                        }
                    }
                    System.out.println("");
                    System.out.println("Discard pile: " + discardPile.get(discardPile.size() - 1));
                    System.out.println(name2 + ", it is your turn to play. Your hand is " + player2);
                        ArrayList<String> eligible = new ArrayList<>();
                        for (int b = 0; b < player2.size(); b++) {
                            if (player2.get(b).charAt(0) == discardPile.get(discardPile.size() - 1).charAt(0) || player2.get(b).charAt(1) == discardPile.get(discardPile.size() - 1).charAt(1) || player2.get(b).startsWith("Wild") || discardPile.get(discardPile.size()-1).endsWith("Skip") && player2.get(b).endsWith("Skip")) {
                                eligible.add(player2.get(b));
                            }
                        }
                    if (eligible.size() == 0) {
                        System.out.println("You have been forced to draw. Your drawn card is " + updDeck.get(updDeck.size()-1));
                        player1.add(updDeck.get(updDeck.size() - 1));
                        updDeck.remove(updDeck.size() - 1);
                        player1turn = false;
                        break;
                    } else {
                        System.out.println("Which card would you like to play?");
                        String card = sc.nextLine();
                        boolean playable = false;
                        while (!playable) {
                            if (eligible.contains(card)) {
                                discardPile.add(card);
                                player2.remove(card);
                                playable = true;
                            } else {
                                System.out.println("This card is not playable");
                                System.out.println("Which card would you like to play?");
                                card = sc.nextLine();
                                playable = false;
                            }
                        }
                        if (card.endsWith("Skip")) {
                            break;
                        }
                        if (card.endsWith("Draw2")) {
                            player2.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                            player2.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                        }
                        if (card.startsWith("Wild")) {
                            System.out.println("What colour would you like to change it to? Enter in this format: colour");
                            discardPile.add(sc.nextLine());
                            if (card.endsWith("DrawFour")) {
                                for (int xy = 0; xy < 4; xy++) {
                                    player1.add(updDeck.get(0));
                                    updDeck.remove(0);
                                }
                            }
                        }
                        player1turn = true;
                    }
                }
                if (player2.size() == 0) {
                    System.out.println(name2 + " won the game with " + player1.size() + " points!");
                    gameFinish = true;
                    break;
                }
            }
        } else if (AIorPlayer.equals("AI")) {
            // from here to line 368, the code is the exact same as the previous ones, just with variable names changed
            System.out.println("What is your name?");
            String name = sc.nextLine();

            ArrayList<String> player = new ArrayList<String>();
            ArrayList<String> AI = new ArrayList<String>();
            while (updDeck.size() != 86) {
                player.add(updDeck.get(0));
                updDeck.remove(0);
                AI.add(updDeck.get(0));
                updDeck.remove(0);
            }

            ArrayList<String> discardPile = new ArrayList<>();
            for (int a = 0; a < 86; a++) {
                if ((updDeck.get(a)).length() == 2) {
                    discardPile.add(updDeck.get(a));
                    updDeck.remove(a);
                    break;
                }
            }

            boolean playerTurn = true;
            boolean gameFinish = false;

            while (!gameFinish) {
                while (playerTurn) {
                    if (updDeck.size() == 0) {
                        while (discardPile.size() > 1) {
                            int randNumb = (int) (Math.random() * (deck.size() - 1 + 1) + 1);
                            updDeck.add(discardPile.get(randNumb));
                            deck.remove(randNumb);
                        }
                        for (int a = 0; a < 86; a++) {
                            if ((updDeck.get(a)).length() == 2) {
                                discardPile.add(updDeck.get(a));
                                updDeck.remove(a);
                                break;
                            }
                        }
                    }
                    System.out.println(" ");
                    System.out.println("Discard pile: " + discardPile.get(discardPile.size() - 1));
                    System.out.println(name + ", it is your turn to play. Your hand is " + player);

                    ArrayList<String> eligible = new ArrayList<>();
                    for (int b = 0; b < player.size(); b++) {
                        if (player.get(b).charAt(0) == discardPile.get(discardPile.size() - 1).charAt(0) || player.get(b).charAt(1) == discardPile.get(discardPile.size() - 1).charAt(1) || player.get(b).startsWith("Wild") || discardPile.get(discardPile.size() - 1).endsWith("Skip") && player.get(b).endsWith("Skip")) {
                            eligible.add(player.get(b));
                        }
                    }
                    if (eligible.size() == 0) {
                        System.out.println("You have been forced to draw. Your drawn card is " + updDeck.get(updDeck.size() - 1));
                        player.add(updDeck.get(updDeck.size() - 1));
                        updDeck.remove(updDeck.size() - 1);
                        playerTurn = false;
                        break;
                    } else {
                        System.out.println("Which card would you like to play?");
                        String card = sc.nextLine();
                        boolean playable = false;
                        while (!playable) {
                            if (eligible.contains(card)) {
                                discardPile.add(card);
                                player.remove(card);
                                playable = true;
                            } else {
                                System.out.println("This card is not playable");
                                System.out.println("Which card would you like to play?");
                                card = sc.nextLine();
                                playable = false;
                            }
                        }
                        if (card.endsWith("Skip")) {
                            break;
                        }
                        if (card.endsWith("Draw2")) {
                            AI.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                            AI.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                        }
                        if (card.startsWith("Wild")) {
                            System.out.println("What colour would you like to change it to? Enter in this format: colour");
                            discardPile.add(sc.nextLine());
                            if (card.endsWith("DrawFour")) {
                                for (int js = 0; js < 4; js++) {
                                    AI.add(updDeck.get(0));
                                    updDeck.remove(0);
                                }
                            }
                        }
                        playerTurn = false;
                    }
                }
                if (player.size() == 0) {
                    System.out.println("You won the game with " + AI.size() + " points!");
                    gameFinish = true;
                    break;
                }
                // This is the AI's code
                while (!playerTurn) {
                    // refilling the deck in case it is empty (from drawing etc.), as was done previously
                    if (updDeck.size() == 0) {
                        while (discardPile.size() > 1) {
                            int randNumb = (int) (Math.random() * (deck.size() - 1 + 1) + 1);
                            updDeck.add(discardPile.get(randNumb));
                            // removing the added card from the unshuffled deck. Once all cards have been removed, the while loop will terminate
                            deck.remove(randNumb);
                        }
                        for (int a = 0; a < 86; a++) {
                            // Looks for a card made up of one colour and one number (e.g. g7, r3) to start the discard pile with
                            if ((updDeck.get(a)).length() == 2) {
                                discardPile.add(updDeck.get(a));
                                updDeck.remove(a);
                                // ends the loop so it stops looking
                                break;
                            }
                        }
                    }
                    // informing the player about the AI's hand to avoid confusion
                    System.out.println(" ");
                    System.out.println("The AI's hand is " + AI);
                    // detecting which cards in the AI's hand are eligible to play
                    ArrayList<String> eligible = new ArrayList<>();
                    for (int b = 0; b < AI.size(); b++) {
                        if (AI.get(b).charAt(0) == discardPile.get(discardPile.size() - 1).charAt(0) || AI.get(b).charAt(1) == discardPile.get(discardPile.size() - 1).charAt(1) || AI.get(b).startsWith("Wild") || (discardPile.get(discardPile.size() - 1).endsWith("Skip") && AI.get(b).endsWith("Skip"))) {
                            eligible.add(AI.get(b));
                        }
                    }
                    // determining the AI's next action
                    int randomNum = 0;
                    String card = "";
                    // if there are no cards available to play, the AI will draw a card
                    if (eligible.size() == 0) {
                        System.out.println("The AI has drawn");
                        AI.add(updDeck.get(updDeck.size() - 1));
                        updDeck.remove(updDeck.size() - 1);
                        // making it the player's turn, as the AI just drew
                        playerTurn = true;
                        break;
                    }
                    // if there are eligible cards, the AI will pick a random one to play and execute the rest of the code
                    else {
                        randomNum = (int) (Math.random() * (eligible.size() - 1 - 0 + 1) + 0);
                        card = eligible.get(randomNum);
                        AI.remove(eligible.get(randomNum));
                        System.out.println("The AI has placed a " + card + " card");
                        discardPile.add(card);
                        // doing break; will give the AI another turn in case of a skip, effectively skipping the player's turn as was done previously
                        if (card.endsWith("Skip")) {
                            break;
                        }
                        // making the player draw 2 if the card is a Draw2
                        if (card.endsWith("Draw2")) {
                            player.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                            player.add(updDeck.get(updDeck.size() - 1));
                            updDeck.remove(updDeck.size() - 1);
                        }
                        if (card.startsWith("Wild")) {
                            // the AI picks a random colour to change the wild card to
                            String[] colourChoiceAI = {"red", "green", "blue", "yellow"};
                            int randNumWild = (int) (Math.random() * (4 - 1 + 1) + 1);
                            discardPile.add(colourChoiceAI[randNumWild - 1]);
                            System.out.println("Colour is now " + colourChoiceAI[randNumWild - 1]);
                            // making the player draw four, in case the wild card is a WildDrawFour
                            if (card.endsWith("DrawFour")) {
                                for (int ue = 0; ue < 4; ue++) {
                                    player.add(updDeck.get(0));
                                    updDeck.remove(0);
                                }
                            }
                        }
                        // once the code has been executed, the turn is transferred to the player's
                        playerTurn = true;
                    }
                }
                // if the AI's hand is empty, it wins
                if (AI.size() == 0) {
                    System.out.println("The AI has won the game with " + player.size() + " points.");
                    gameFinish = true;
                    break;
                }
            }
        }
        // this code is outside of the player or ai choice, so it displays whichever option you pick, and it gives you the option to play again
            System.out.println("Would you like to play again? If yes, type YES. If no, type NO");
            String playAgain = sc.nextLine();
            if (playAgain.equals("YES")) {
                // most of the code is nested inside a while (gameRestart) loop, so this will just make the code start again
                gameRestart = true;
                // putting all these System.out.println(...)s to help differentiate the new game from the old, and avoid confusion
                System.out.println(" ");
                System.out.println(" ");
                System.out.println(" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ");
                System.out.println(" ");
                System.out.println(" ");
            } else if (playAgain.equals("NO")) {
                // ending the loop and putting an end to the program
                gameRestart = false;
                break;
            }
        }
        // closing the scanner
        sc.close();
    }
}
